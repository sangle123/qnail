/*!
 *  replaceme.js - text rotating component in vanilla JavaScript
 *  @version 1.1.0
 *  @author Adrian Klimek
 *  @link https://adrianklimek.github.io/replaceme/
 *  @copyright Adrian Klimek 2016
 *  @license MIT
 */ !function (t, i) { "use strict"; function o(t, i) { var o = { word: "", animation: "animated fadeIn", speed: 2e3, separator: ",", hoverStop: !1, clickChange: !1, loopCount: "infinite", autoRun: !0, onInit: !1, onChange: !1, onComplete: !1 }; if ("object" == typeof i ? this.options = function t(i, o) { for (var n in o) o.hasOwnProperty(n) && (i[n] = o[n]); return i }(o, i) : this.options = o, void 0 === t) throw Error('ReplaceMe [constructor]: "element" parameter is required'); if ("object" == typeof t) this.element = t; else if ("string" == typeof t) this.element = document.querySelector(t); else throw Error('ReplaceMe [constructor]: wrong "element" parameter'); this.init() } o.prototype.init = function () { "function" == typeof this.options.onInit && this.options.onInit(), this.words = this.escapeHTML(this.options.word).split(this.options.separator), this.count = this.words.length, this.position = this.loopCount = 0, this.running = !1, this.bindAll(), !0 === this.options.autoRun && this.start() }, o.prototype.bindAll = function () { !0 === this.options.hoverStop && (this.element.addEventListener("mouseover", this.pause.bind(this)), this.element.addEventListener("mouseout", this.start.bind(this))), !0 === this.options.clickChange && this.element.addEventListener("click", this.change.bind(this)) }, o.prototype.changeAnimation = function () { this.change(), this.loop = setTimeout(this.changeAnimation.bind(this), this.options.speed) }, o.prototype.start = function () { !0 !== this.running && (this.running = !0, this.changeWord(this.words[this.position]), this.position++), this.loop = setTimeout(this.changeAnimation.bind(this), this.options.speed) }, o.prototype.change = function () { if (this.position > this.count - 1 && (this.position = 0, this.loopCount++, this.loopCount >= this.options.loopCount)) { this.stop(); return } this.changeWord(this.words[this.position]), this.position++, "function" == typeof this.options.onChange && this.options.onChange() }, o.prototype.stop = function () { this.running = !1, this.position = this.loopCount = 0, this.pause(), "function" == typeof this.options.onComplete && this.options.onComplete() }, o.prototype.pause = function () { clearTimeout(this.loop) }, o.prototype.changeWord = function (t) { this.element.innerHTML = '<span class="' + this.options.animation + '" style="display:inline-block;">' + t + "</span>" }, o.prototype.escapeHTML = function (t) { var i = /<\/?\w+\s*[^>]*>/g; return !0 === i.test(t) ? t.replace(i, "") : t }, t.ReplaceMe = o, "function" == typeof i && i.fn.extend({ ReplaceMe: function (t) { return this.each(function () { new o(this, t) }) } }) }(window, window.jQuery);